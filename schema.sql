--
-- Create the 'profiles' table to store user data
--
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  contact_no text,
  role text default 'user'
);

-- Set up Row Level Security (RLS) for the 'profiles' table
alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( auth.uid() = id );

create policy "Users can update their own profile."
  on profiles for update
  using ( auth.uid() = id );

-- This trigger automatically creates a profile entry when a new user signs up.
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, avatar_url, contact_no, role)
  values (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url',
    new.raw_user_meta_data->>'contact_no',
    'user' -- Default role
  );
  return new;
end;
$$;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


--
-- Create the 'subscriptions' table to manage user plans
--
create table subscriptions (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references public.profiles(id) on delete cascade not null unique,
  plan_name text,
  is_active boolean default false,
  expires_at timestamp with time zone,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Set up Row Level Security (RLS) for the 'subscriptions' table
alter table subscriptions enable row level security;

create policy "Users can view their own subscription."
  on subscriptions for select
  using ( auth.uid() = user_id );


--
-- Create the 'coupons' table to manage discounts
--
create table coupons (
    id bigint generated by default as identity primary key,
    code text not null unique,
    discount_percent integer not null check (discount_percent > 0 and discount_percent <= 100),
    is_active boolean default true,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    expires_at timestamp with time zone
);

-- Set up Row Level Security (RLS) for the 'coupons' table
alter table coupons enable row level security;

create policy "Coupons are publicly viewable."
  on coupons for select
  using (true);
  
create policy "Admins can manage coupons."
  on coupons for all
  using ( (select auth.uid() from auth.users) in (select id from profiles where role = 'admin' limit 1) )
  with check ( (select auth.uid() from auth.users) in (select id from profiles where role = 'admin' limit 1) );
